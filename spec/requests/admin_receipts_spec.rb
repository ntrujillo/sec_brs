# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe('/admin_receipts', type: :request) do
     # This should return the minimal set of attributes required to create a valid
     # AdminReceipt. As you add validations to AdminReceipt, be sure to
     # adjust the attributes here as well.
     let(:valid_attributes) do
          skip('Add a hash of attributes valid for your model')
     end

     let(:invalid_attributes) do
          skip('Add a hash of attributes invalid for your model')
     end

     describe 'GET /index' do
          it 'renders a successful response' do
               AdminReceipt.create!(valid_attributes)
               get admin_receipts_url
               expect(response).to(be_successful)
          end
     end

     describe 'GET /show' do
          it 'renders a successful response' do
               admin_receipt = AdminReceipt.create!(valid_attributes)
               get admin_receipt_url(admin_receipt)
               expect(response).to(be_successful)
          end
     end

     describe 'GET /new' do
          it 'renders a successful response' do
               get new_admin_receipt_url
               expect(response).to(be_successful)
          end
     end

     describe 'GET /edit' do
          it 'renders a successful response' do
               admin_receipt = AdminReceipt.create!(valid_attributes)
               get edit_admin_receipt_url(admin_receipt)
               expect(response).to(be_successful)
          end
     end

     describe 'POST /create' do
          context 'with valid parameters' do
               it 'creates a new AdminReceipt' do
                    expect do
                         post(admin_receipts_url, params: { admin_receipt: valid_attributes })
                    end.to(change(AdminReceipt, :count).by(1))
               end

               it 'redirects to the created admin_receipt' do
                    post admin_receipts_url, params: { admin_receipt: valid_attributes }
                    expect(response).to(redirect_to(admin_receipt_url(AdminReceipt.last)))
               end
          end

          context 'with invalid parameters' do
               it 'does not create a new AdminReceipt' do
                    expect do
                         post(admin_receipts_url, params: { admin_receipt: invalid_attributes })
                    end.to(change(AdminReceipt, :count).by(0))
               end

               it "renders a successful response (i.e. to display the 'new' template)" do
                    post admin_receipts_url, params: { admin_receipt: invalid_attributes }
                    expect(response).to(be_successful)
               end
          end
     end

     describe 'PATCH /update' do
          context 'with valid parameters' do
               let(:new_attributes) do
                    skip('Add a hash of attributes valid for your model')
               end

               it 'updates the requested admin_receipt' do
                    admin_receipt = AdminReceipt.create!(valid_attributes)
                    patch admin_receipt_url(admin_receipt),
                          params: { admin_receipt: new_attributes }
                    admin_receipt.reload
                    skip('Add assertions for updated state')
               end

               it 'redirects to the admin_receipt' do
                    admin_receipt = AdminReceipt.create!(valid_attributes)
                    patch admin_receipt_url(admin_receipt),
                          params: { admin_receipt: new_attributes }
                    admin_receipt.reload
                    expect(response).to(redirect_to(admin_receipt_url(admin_receipt)))
               end
          end

          context 'with invalid parameters' do
               it "renders a successful response (i.e. to display the 'edit' template)" do
                    admin_receipt = AdminReceipt.create!(valid_attributes)
                    patch admin_receipt_url(admin_receipt),
                          params: { admin_receipt: invalid_attributes }
                    expect(response).to(be_successful)
               end
          end
     end

     describe 'DELETE /destroy' do
          it 'destroys the requested admin_receipt' do
               admin_receipt = AdminReceipt.create!(valid_attributes)
               expect do
                    delete(admin_receipt_url(admin_receipt))
               end.to(change(AdminReceipt, :count).by(-1))
          end

          it 'redirects to the admin_receipts list' do
               admin_receipt = AdminReceipt.create!(valid_attributes)
               delete admin_receipt_url(admin_receipt)
               expect(response).to(redirect_to(admin_receipts_url))
          end
     end
end
